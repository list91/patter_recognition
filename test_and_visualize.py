#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö
—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.
"""

import os
import sys
import json
from pathlib import Path
from ultralytics import YOLO
import cv2

def load_experiment_config(run_dir):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."""
    config_path = Path(run_dir) / 'experiment_info.json'
    if config_path.exists():
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def main():
    print("=" * 70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 70)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    if len(sys.argv) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        exp_name = sys.argv[1]
        model_path = f"runs/detect/{exp_name}/weights/best.pt"
        run_dir = f"runs/detect/{exp_name}"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º train (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
        model_path = "runs/detect/train/weights/best.pt"
        run_dir = "runs/detect/train"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if not os.path.exists(model_path):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {model_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ train.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")
        return

    print(f"\nüìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_path}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    exp_config = load_experiment_config(run_dir)
    if exp_config:
        conf_threshold = exp_config['config'].get('conf_threshold', 0.1)
        iou_threshold = exp_config['config'].get('iou_threshold', 0.45)
        print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:")
        print(f"   - conf_threshold: {conf_threshold}")
        print(f"   - iou_threshold: {iou_threshold}")
    else:
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        conf_threshold = 0.1
        iou_threshold = 0.45
        print(f"‚öôÔ∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print(f"\n‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    model = YOLO(model_path)

    # –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    test_images_dir = Path("data/images/test")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not test_images_dir.exists():
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ü–∞–ø–∫–∞ {test_images_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = sorted(list(test_images_dir.glob("*.jpg")) + list(test_images_dir.glob("*.png")))

    if not test_images:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ {test_images_dir}!")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìä –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {conf_threshold}")
    print(f"üìä –ü–æ—Ä–æ–≥ IoU: {iou_threshold}\n")

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = Path("results")
    results_dir.mkdir(exist_ok=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_detections = 0
    stats_per_image = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("=" * 70)
    print("üîç –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 70 + "\n")

    for img_path in test_images:
        print(f"üì∑ {img_path.name}")

        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model.predict(
            source=str(img_path),
            imgsz=1280,
            conf=conf_threshold,
            iou=iou_threshold,
            save=False,
            verbose=False,
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = results[0]
        boxes = result.boxes
        num_detections = len(boxes)
        total_detections += num_detections

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ confidence
        confidences = boxes.conf.cpu().numpy() if num_detections > 0 else []

        img_stats = {
            'name': img_path.name,
            'detections': num_detections,
            'avg_conf': float(confidences.mean()) if len(confidences) > 0 else 0.0,
            'max_conf': float(confidences.max()) if len(confidences) > 0 else 0.0,
            'min_conf': float(confidences.min()) if len(confidences) > 0 else 0.0,
        }
        stats_per_image.append(img_stats)

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏
        if num_detections > 0:
            print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ: {num_detections} switch")
            print(f"   ‚îú‚îÄ Avg confidence: {img_stats['avg_conf']:.3f}")
            print(f"   ‚îú‚îÄ Max confidence: {img_stats['max_conf']:.3f}")
            print(f"   ‚îî‚îÄ Min confidence: {img_stats['min_conf']:.3f}")
        else:
            print(f"   ‚úó –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        output_path = results_dir / f"pred_{img_path.name}"

        # –†–∏—Å—É–µ–º bounding boxes –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        annotated_img = result.plot(
            line_width=2,
            font_size=12,
            conf=True,
            labels=True,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cv2.imwrite(str(output_path), annotated_img)
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}\n")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("=" * 70)
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 70 + "\n")

    print(f"üéØ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(test_images)}")
    print(f"üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_detections}")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {total_detections / len(test_images):.1f}")

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    found = [s for s in stats_per_image if s['detections'] > 0]
    not_found = [s for s in stats_per_image if s['detections'] == 0]

    print(f"\nüìã –° –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {len(found)}/{len(test_images)}")
    print(f"üìã –ë–µ–∑ –¥–µ—Ç–µ–∫—Ü–∏–π: {len(not_found)}/{len(test_images)}")

    if found:
        avg_conf_all = sum(s['avg_conf'] for s in found) / len(found)
        print(f"\nüíØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf_all:.3f}")

    # –¢–æ–ø-5 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ—Ç–µ–∫—Ü–∏–π
    print("\nüèÜ –¢–û–ü-5 –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –î–ï–¢–ï–ö–¶–ò–ô:")
    top5 = sorted(stats_per_image, key=lambda x: x['detections'], reverse=True)[:5]
    for i, s in enumerate(top5, 1):
        print(f"   {i}. {s['name']:20} - {s['detections']:3} –æ–±—ä–µ–∫—Ç–æ–≤ (conf: {s['avg_conf']:.3f})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    train_image_stats = next((s for s in stats_per_image if 'train_01' in s['name']), None)
    if train_image_stats:
        print("\nüìå –ü–†–û–í–ï–†–ö–ê –ù–ê –¢–†–ï–ù–ò–†–û–í–û–ß–ù–û–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò:")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {train_image_stats['name']}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {train_image_stats['detections']} switch")
        print(f"   Avg confidence: {train_image_stats['avg_conf']:.3f}")
        if train_image_stats['detections'] == 0:
            print("   ‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞—à–ª–∞ –æ–±—ä–µ–∫—Ç—ã –¥–∞–∂–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!")
            print("   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å conf_threshold –∏–ª–∏ –æ–±—É—á–∏—Ç—å –¥–æ–ª—å—à–µ")
        elif train_image_stats['avg_conf'] < 0.5:
            print("   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
            print("   üí° –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è –ø–ª–æ—Ö–æ - –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç–ø–æ—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("   ‚úÖ –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON
    stats_path = results_dir / "test_statistics.json"
    with open(stats_path, 'w', encoding='utf-8') as f:
        json.dump({
            'model_path': model_path,
            'conf_threshold': conf_threshold,
            'iou_threshold': iou_threshold,
            'total_images': len(test_images),
            'total_detections': total_detections,
            'avg_detections_per_image': total_detections / len(test_images),
            'images_with_detections': len(found),
            'images_without_detections': len(not_found),
            'per_image_stats': stats_per_image,
        }, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_path}")

    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 70)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_path}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 70)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 70)

    if total_detections == 0:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞—à–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞!")
        print("\nüìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –°–Ω–∏–∑–∏—Ç—å conf_threshold –≤ train_config.yaml")
        print("   2. –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö (epochs)")
        print("   3. –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (imgsz)")
        print("   4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à—É—é –º–æ–¥–µ–ª—å (yolo11s.pt)")
    elif len(not_found) > len(found):
        print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("\nüìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   2. –£–≤–µ–ª–∏—á–∏—Ç—å epochs –¥–æ 300")
        print("   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Å–∞ –ø–æ—Ç–µ—Ä—å (box, cls)")
    else:
        print("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        print("\nüìù –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   1. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("   2. –£–≤–µ–ª–∏—á—å—Ç–µ conf_threshold –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è false positives")
        print("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è lr0 –∏ weight_decay")

    print("=" * 70 + "\n")

if __name__ == "__main__":
    main()
