#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è YOLO11 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
"""

import yaml
import sys
from pathlib import Path
from ultralytics import YOLO
import json
from datetime import datetime

def load_config(config_path="train_config.yaml"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    if not Path(config_path).exists():
        print(f"‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return {}

    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    return config

def save_experiment_info(config, results_dir):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ."""
    info = {
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'config': config,
        'results_dir': str(results_dir)
    }

    info_path = Path(results_dir) / 'experiment_info.json'
    with open(info_path, 'w', encoding='utf-8') as f:
        json.dump(info, f, indent=2, ensure_ascii=False)

    print(f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {info_path}")

def print_config(config):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    print("\n" + "=" * 70)
    print(f"üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê: {config.get('experiment_name', 'default')}")
    print("=" * 70)

    categories = {
        '–û—Å–Ω–æ–≤–Ω—ã–µ': ['model', 'epochs', 'imgsz', 'batch'],
        '–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä': ['optimizer', 'lr0', 'lrf', 'momentum', 'weight_decay'],
        '–¶–≤–µ—Ç–æ–≤—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏': ['hsv_h', 'hsv_s', 'hsv_v'],
        '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏': ['mosaic', 'degrees', 'translate', 'scale', 'fliplr', 'flipud'],
        '–ü–æ—Ç–µ—Ä–∏': ['box', 'cls', 'dfl'],
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': ['conf_threshold', 'iou_threshold'],
    }

    for category, keys in categories.items():
        print(f"\nüìã {category}:")
        for key in keys:
            if key in config:
                print(f"   {key:20} = {config[key]}")

    print("=" * 70 + "\n")

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = sys.argv[1] if len(sys.argv) > 1 else "train_config.yaml"
    config = load_config(config_file)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    defaults = {
        'experiment_name': 'baseline',
        'model': 'yolo11n.pt',
        'epochs': 150,
        'imgsz': 1280,
        'batch': 2,
        'optimizer': 'auto',
        'lr0': 0.002,
        'lrf': 0.01,
        'momentum': 0.937,
        'weight_decay': 0.0005,
        'mosaic': 0.0,
        'degrees': 0.0,
        'translate': 0.0,
        'scale': 0.0,
        'fliplr': 0.0,
        'flipud': 0.0,
        'shear': 0.0,
        'hsv_h': 0.015,
        'hsv_s': 0.5,
        'hsv_v': 0.4,
        'dropout': 0.0,
        'mixup': 0.0,
        'copy_paste': 0.0,
        'box': 7.5,
        'cls': 0.5,
        'dfl': 1.5,
        'patience': 50,
        'close_mosaic': 10,
        'warmup_epochs': 3.0,
        'cos_lr': False,
        'conf_threshold': 0.1,
        'iou_threshold': 0.45,
    }

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
    for key, value in defaults.items():
        config.setdefault(key, value)

    print_config(config)

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLO11 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ switch")
    print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file}\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO(config['model'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    exp_name = f"{config['experiment_name']}"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    print("‚è≥ –û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...\n")
    results = model.train(
        data="data.yaml",

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        epochs=config['epochs'],
        imgsz=config['imgsz'],
        batch=config['batch'],

        # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer=config['optimizer'],
        lr0=config['lr0'],
        lrf=config['lrf'],
        momentum=config['momentum'],
        weight_decay=config['weight_decay'],

        # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        mosaic=config['mosaic'],
        degrees=config['degrees'],
        translate=config['translate'],
        scale=config['scale'],
        fliplr=config['fliplr'],
        flipud=config['flipud'],
        shear=config['shear'],

        # –¶–≤–µ—Ç–æ–≤—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        hsv_h=config['hsv_h'],
        hsv_s=config['hsv_s'],
        hsv_v=config['hsv_v'],

        # Dropout –∏ –¥—Ä—É–≥–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        dropout=config['dropout'],
        mixup=config['mixup'],
        copy_paste=config['copy_paste'],

        # –í–µ—Å–∞ –ø–æ—Ç–µ—Ä—å
        box=config['box'],
        cls=config['cls'],
        dfl=config['dfl'],

        # –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        patience=config['patience'],
        close_mosaic=config['close_mosaic'],
        warmup_epochs=config['warmup_epochs'],
        cos_lr=config['cos_lr'],

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        save=True,
        save_period=10,
        device="cpu",
        workers=2,
        project="runs/detect",
        name=exp_name,
        exist_ok=False,  # –°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        verbose=True,
        plots=True,
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    results_dir = Path(model.trainer.save_dir)

    print("\n" + "=" * 70)
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 70)
    print(f"üìÅ –ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {results_dir}")
    print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {results_dir}/weights/best.pt")
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏: {results_dir}/results.png")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ
    save_experiment_info(config, results_dir)

    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("\n" + "=" * 70)
    print("üìà –§–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò")
    print("=" * 70)

    try:
        import pandas as pd
        results_csv = results_dir / "results.csv"
        if results_csv.exists():
            df = pd.read_csv(results_csv)
            last_row = df.iloc[-1]

            print(f"\nüìä –≠–ø–æ—Ö–∞ {int(last_row['epoch'])}:")
            print(f"   Train Loss (box): {last_row['train/box_loss']:.4f}")
            print(f"   Train Loss (cls): {last_row['train/cls_loss']:.4f}")
            print(f"   Val Loss (box):   {last_row['val/box_loss']:.4f}")
            print(f"   Val Loss (cls):   {last_row['val/cls_loss']:.4f}")
            print(f"\nüéØ –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
            print(f"   Precision:  {last_row['metrics/precision(B)']:.4f}")
            print(f"   Recall:     {last_row['metrics/recall(B)']:.4f}")
            print(f"   mAP50:      {last_row['metrics/mAP50(B)']:.4f}")
            print(f"   mAP50-95:   {last_row['metrics/mAP50-95(B)']:.4f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = {
                'precision': float(last_row['metrics/precision(B)']),
                'recall': float(last_row['metrics/recall(B)']),
                'mAP50': float(last_row['metrics/mAP50(B)']),
                'mAP50-95': float(last_row['metrics/mAP50-95(B)']),
                'train_box_loss': float(last_row['train/box_loss']),
                'train_cls_loss': float(last_row['train/cls_loss']),
            }

            metrics_path = results_dir / 'final_metrics.json'
            with open(metrics_path, 'w') as f:
                json.dump(metrics, f, indent=2)

    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {e}")

    print("\n" + "=" * 70)
    print("üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("=" * 70)
    print(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print(f"   python test_and_visualize.py {exp_name}")
    print(f"\n2. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏:")
    print(f"   python compare_runs.py")
    print(f"\n3. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ train_config.yaml –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
    print("=" * 70 + "\n")

if __name__ == "__main__":
    main()
