#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.
"""

import json
import sys
from pathlib import Path
import pandas as pd

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

def load_experiment_metrics(run_dir):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."""
    run_path = Path(run_dir)

    if not run_path.exists():
        return None

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics_path = run_path / 'final_metrics.json'
    experiment_info_path = run_path / 'experiment_info.json'

    if not metrics_path.exists():
        return None

    with open(metrics_path, 'r') as f:
        metrics = json.load(f)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {}
    if experiment_info_path.exists():
        with open(experiment_info_path, 'r', encoding='utf-8') as f:
            exp_info = json.load(f)
            config = exp_info.get('config', {})

    return {
        'name': run_path.name,
        'metrics': metrics,
        'config': config
    }

def main():
    print("=" * 80)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í")
    print("=" * 80 + "\n")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    runs_dir = Path("runs/detect")

    if not runs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ runs/detect –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    experiments = []
    for run_path in sorted(runs_dir.iterdir()):
        if run_path.is_dir():
            exp_data = load_experiment_metrics(run_path)
            if exp_data:
                experiments.append(exp_data)

    if not experiments:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ train.py")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(experiments)}\n")

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("=" * 80)
    print("üìã –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–†–ò–ö")
    print("=" * 80 + "\n")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"{'–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç':<20} {'Precision':>10} {'Recall':>10} {'mAP50':>10} {'mAP50-95':>10} {'Box Loss':>10}"
    print(header)
    print("-" * 80)

    # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    for exp in experiments:
        m = exp['metrics']
        row = (f"{exp['name']:<20} "
               f"{m['precision']:>10.4f} "
               f"{m['recall']:>10.4f} "
               f"{m['mAP50']:>10.4f} "
               f"{m['mAP50-95']:>10.4f} "
               f"{m['train_box_loss']:>10.4f}")
        print(row)

    # –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
    print("\n" + "=" * 80)
    print("üèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò")
    print("=" * 80 + "\n")

    best_precision = max(experiments, key=lambda x: x['metrics']['precision'])
    best_recall = max(experiments, key=lambda x: x['metrics']['recall'])
    best_mAP50 = max(experiments, key=lambda x: x['metrics']['mAP50'])
    best_mAP50_95 = max(experiments, key=lambda x: x['metrics']['mAP50-95'])

    print(f"ü•á –õ—É—á—à–∞—è Precision:  {best_precision['name']} ({best_precision['metrics']['precision']:.4f})")
    print(f"ü•á –õ—É—á—à–∏–π Recall:     {best_recall['name']} ({best_recall['metrics']['recall']:.4f})")
    print(f"ü•á –õ—É—á—à–∏–π mAP50:      {best_mAP50['name']} ({best_mAP50['metrics']['mAP50']:.4f})")
    print(f"ü•á –õ—É—á—à–∏–π mAP50-95:   {best_mAP50_95['name']} ({best_mAP50_95['metrics']['mAP50-95']:.4f})")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    print("\n" + "=" * 80)
    print("‚öôÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
    print("=" * 80 + "\n")

    # –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    key_params = ['model', 'epochs', 'imgsz', 'lr0', 'batch', 'box', 'cls']

    for param in key_params:
        print(f"\nüìå {param}:")
        for exp in experiments:
            value = exp['config'].get(param, 'N/A')
            print(f"   {exp['name']:<20} {value}")

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    csv_path = Path("runs/experiments_comparison.csv")

    rows = []
    for exp in experiments:
        row = {
            'name': exp['name'],
            **exp['metrics'],
            **{f'config_{k}': v for k, v in exp['config'].items() if k in key_params}
        }
        rows.append(row)

    df = pd.DataFrame(rows)
    df.to_csv(csv_path, index=False)

    print("\n" + "=" * 80)
    print(f"üíæ –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {csv_path}")
    print("=" * 80 + "\n")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("=" * 80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80 + "\n")

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    if len(experiments) >= 2:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å—ã)
        sorted_exps = sorted(experiments, key=lambda x: x['name'])

        first_mAP = sorted_exps[0]['metrics']['mAP50']
        last_mAP = sorted_exps[-1]['metrics']['mAP50']

        if last_mAP > first_mAP:
            improvement = ((last_mAP - first_mAP) / first_mAP) * 100
            print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: mAP50 —É–ª—É—á—à–∏–ª—Å—è –Ω–∞ {improvement:.1f}%")
            print(f"   –ü–µ—Ä–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {first_mAP:.4f}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {last_mAP:.4f}")
            print("\n‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏!")
        elif last_mAP < first_mAP:
            decline = ((first_mAP - last_mAP) / first_mAP) * 100
            print(f"üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ: mAP50 —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {decline:.1f}%")
            print(f"   –ü–µ—Ä–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {first_mAP:.4f}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {last_mAP:.4f}")
            print("\n‚ö†Ô∏è  –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ª—É—á—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        else:
            print("‚û°Ô∏è  –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")

    # –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print("\nüìù –ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ:")

    best_overall = max(experiments, key=lambda x: x['metrics']['mAP50'])

    if best_overall['metrics']['mAP50'] < 0.3:
        print("   ‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (<0.3 mAP50):")
        print("      1. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 50-100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        print("      2. –£–≤–µ–ª–∏—á—å—Ç–µ epochs –¥–æ 300")
        print("      3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ yolo11s.pt –∏–ª–∏ yolo11m.pt")
    elif best_overall['metrics']['mAP50'] < 0.6:
        print("   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (0.3-0.6 mAP50):")
        print("      1. –£–≤–µ–ª–∏—á—å—Ç–µ imgsz –¥–æ 1536")
        print("      2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ—Å–∞ –ø–æ—Ç–µ—Ä—å: box=10.0, cls=1.0")
        print("      3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ lr0=0.001 –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    else:
        print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (>0.6 mAP50):")
        print("      1. –£–≤–µ–ª–∏—á—å—Ç–µ conf_threshold –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è false positives")
        print("      2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä")
        print("      3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–Ω—Å–∞–º–±–ª—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π")

    print("\n" + "=" * 80 + "\n")

if __name__ == "__main__":
    main()
